openapi: 3.0.3
info:
  title: Coding-Service-API
  description: Coding-Service-API
  version: 0.0.4
paths:
  /info:
    get:
      summary: return conding service identification
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInfo"

  /tasks:
    put:
      summary: add a task
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskSeed"
            example: { type: train }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    get:
      summary: get list of all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

  /tasks/{task_id}:
    get:
      summary: get specific task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    patch:
      summary: update instructions or other fields
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdate"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    delete:
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
      responses:
        200:
          description: OK

  /tasks/{task_id}/{action}:
    post:
      summary: perform action on task
      description: perform an action on task |
        common actions are `abort` and `commit`
      parameters:
        - in: path
          name: action
          description: action name, usually `abort` or `commit`
          required: true
          schema:
            $ref: "#/components/schemas/TaskAction"
          example: commit
        - in: path
          name: task_id
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{task_id}/data:
    put:
      summary: add a chunk of data for a specific task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSet"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataChunk"

  /tasks/{task_id}/data/{chunk_id}:
    get:
      summary: retrieve a chunk of data from a specific task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
        - in: path
          name: chunk_id
          required: true
          schema:
            $ref: "#/components/schemas/ChunkId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSet"
    delete:
      summary: delete a chunk of data from a specific task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
        - in: path
          name: chunk_id
          required: true
          schema:
            $ref: "#/components/schemas/ChunkId"
      responses:
        200:
          description: OK

  /coders:
    get:
      summary: list as available coders
      description: Returns a list of available coders. What a coder is depends to the implementation of the api. In most
        cases it will be a pretrained model. It also could be a specific set of instructions.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoderList"

  /coders/{coder_id}:
    delete:
      summary: delete coder
      parameters:
        - in: path
          name: coder_id
          required: true
          schema:
            $ref: "#/components/schemas/CoderId"
      responses:
        200:
          description: OK

components:
  schemas:
    ServiceInfo:
      type: object
      properties:
        id:
          type: string
          example: 'ExampleCodingService1'
        type:
          type: string
          example: 'example-coding-service'
        version:
          type: string
          example: '1.0.2'
          pattern: ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-(0|[1-9A-Za-z-][0-9A-Za-z-]*)(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$
        apiVersion:
          type: string
          example: '0.0.1'
          pattern: ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-(0|[1-9A-Za-z-][0-9A-Za-z-]*)(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$
        instructionsText:
          type: string
        instructionsSchema:
          type: object
          properties:
            "$id":
              type: string
            "$schema":
              type: string
              enum:
                - http://json-schema.org/draft/2020-12/schema#
                - http://json-schema.org/draft/2019-09/schema#
                - http://json-schema.org/draft-07/schema#
          required:
            - $id
            - $schema
      required:
        - id
        - type
        - version
        - apiVersion
        - instructionsSchema


    TaskId:
      type: string
      example: 'task#1234569'

    TaskType:
      type: string
      enum:
        - 'train'
        - 'code'
        - 'unknown'
      example: 'train'

    TaskAction:
      type: string
      enum:
        - 'commit'
        - 'abort'
      example: 'commit'

    TaskInstructions:
      anyOf:
        - $ref: '../../coding-service-implementation/api.yaml#/components/schemas/train'
        - $ref: '../../coding-service-implementation/api.yaml#/components/schemas/code'

    TaskSeed:
      type: object
      properties:
        label:
          type: string
        type:
          $ref: "#/components/schemas/TaskType"
      required:
        - type

    Task:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/TaskId"
        label:
          type: string
        type:
          $ref: "#/components/schemas/TaskType"
        events:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                enum: [ 'create', 'commit', 'start', 'fail', 'finish', 'abort' ]
              message:
                type: string
              timestamp:
                type: integer
        instructions:
          oneOf:
            - $ref: "#/components/schemas/TaskInstructions"
            - $ref: "#/components/schemas/CoderId"
        data:
          type: array
          items:
            $ref: "#/components/schemas/DataChunk"
      required:
        - id
        - label
        - type
        - events
        - data
      example:
        id: "123456"
        type: "train"
        label: "example task"
        events:
          - status: "create"
            message: "task created"
            timestamp: 123456789
        data:
          - id: "chunk1"
            type: "input"

    TaskUpdate:
      type: object
      properties:
        label:
          type: string
        type:
          $ref: "#/components/schemas/TaskType"
        instructions:
          oneOf:
            - $ref: "#/components/schemas/TaskInstructions"
            - $ref: "#/components/schemas/CoderId"

    ChunkId:
      type: string
      example: "chunk#13346"

    ChunkType:
      type: string
      enum:
        - "input"
        - "output"
      example: "input"

    DataChunk:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ChunkId"
        type:
          $ref: "#/components/schemas/ChunkType"
      required:
        - id
        - type

    DataSet:
      type: array
      items:
        $ref: "#/components/schemas/Response"
      example:
        [
          { setId: 'user1',  id: 'a', value: 'some answer', status: 'VALUE_CHANGED' },
          { setId: 'user1',  id: 'b', value: 'some other answer', status: 'VALUE_CHANGED' },
          { setId: 'user2',  id: 'a', value: 'some answer', status: 'VALUE_CHANGED' },
          { setId: 'user2',  id: 'b', value: 'trash answer', status: 'VALUE_CHANGED' },
        ]

    Response:
      title: Response
      description: Data structure produced by verona players
      type: object
      properties:
        setId:
          type: string
          description: Identifier of the set. Typically a user-id.
        id:
          type: string
          pattern: ^[0-9a-zA-Z_-]+$
          description: Identifier for the data source (variable)
        status:
          type: string
          enum:
            - UNSET
            - NOT_REACHED
            - DISPLAYED
            - PARTLY_DISPLAYED
            - VALUE_CHANGED
            - DERIVE_PENDING
            - DERIVE_ERROR
            - NO_CODING
            - INVALID
            - CODING_INCOMPLETE
            - CODING_ERROR
            - CODING_COMPLETE
            - INTENDED_INCOMPLETE
          description: Status as stage in the workflow of creating and coding a variable's value
        value:
          anyOf:
            - type: array
              items:
                type: string
            - type: array
              items:
                type: number
            - type: array
              items:
                type: boolean
            - type: number
            - type: string
            - type: boolean
        subform:
          type: string
          description: If variables i. e. data source ids are not unique in the unit, 'subform' can specify the sub object related to the specific variable.
        code:
          type: integer
          description: Code representing the category of the value after coding process.
        score:
          type: integer
          description: This value represents the result evaluation of the code after coding process.
      required:
        - setId
        - id
        - status
        - value

    CoderId:
      type: string
      example: "coder#123"

    Coder:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CoderId"
        label:
          type: string
      required:
        - id
        - label

    CoderList:
      type: array
      items:
        $ref: "#/components/schemas/Coder"
